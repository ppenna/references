@article{Blumofe1996,
    abstract = { Cilk (pronounced “silk”) is a C-based runtime system for
                 multithreaded parallel programming. In this paper, we document the
                 efficiency of the Cilk work-stealing scheduler, both empirically and
                 analytically. We show that on real and synthetic applications, the
                 “work” and “critical-path length” of a Cilk computation can be used
                 to model performance accurately.  Consequently, a Cilk programmer
                 can focus on reducing the computation's work and critical-path
                 length, insulated from load balancing and other runtime scheduling
                 issues.  We also prove that for the class of “fully strict”
                 (well-structured) programs, the Cilk scheduler achieves space, time,
                 and communication bounds all within a constant factor of optimal. The
                 Cilk runtime system currently runs on the Connection Machine CM5
                 MPP, the Intel Paragon MPP, the Sun Sparcstation SMP, and the
                 Cilk-NOW network of workstations. Applications written in Cilk
                 include protein folding, graphic rendering, backtrack search, and
                 the ★Socrates chess program, which won second prize in the 1995 ICCA
                 World Computer Chess Championship.
    },
    author   = { Blumofe, Robert D and
                 Joerg, Christopher F and
                 Kuszmaul, Bradley C and
                 Leiserson, Charles E and
                 Randall, Keith H and
                 Zhou, Yuli
    },
    doi      = { https://doi.org/10.1006/jpdc.1996.0107 },
    issn     = { 0743-7315 },
    journal  = { Journal of Parallel and Distributed Computing (JPDC) },
    number   = { 1 },
    pages    = { 55--69 },
    title    = { Cilk: An Efficient Multithreaded Runtime System },
    url      = { http://www.sciencedirect.com/science/article/pii/S0743731596901070 },
    volume   = { 37 },
    year     = { 1996 }
}

@article{Dinechin2013-1,
    author    = { de Dinechin, Beno{\^{i}}t Dupont and
                  de Massas, Pierre Guironnet and
                  Lager, Guillaume and
                  L{\'{e}}ger, Cl{\'{e}}ment and
                  Orgogozo, Benjamin and
                  Reybert, J{\'{e}}r{\^{o}}me and
                  Strudel, Thierry
    },
    doi       = { 10.1016/j.procs.2013.05.333 },
    issn      = { 1877-0509 },
    journal   = { Procedia Computer Science },
    month     = { jan },
    number    = { 2013 International Conference on Computational Science },
    pages     = { 1654--1663 },
    publisher = { Elsevier },
    title     = { A Distributed Run-Time Environment for the Kalray MPPA-256 Integrated Manycore Processor },
    url       = { https://www.sciencedirect.com/science/article/pii/S1877050913004766?via\%3Dihub },
    volume    = { 18 },
    year      = { 2013 }
}

@inproceedings{Hascoet2017,
	address   = { Seoul },
	author    = { Hasco{ \"{ e}}t, Julien and
		          de Dinechin, Beno{ \^{ i}}t Dupont and
			      de Massas, Pierre Guironnet and
				  Ho, Minh Quan
	},
	booktitle = { Symposium on Embedded Systems for Real-Time Multimedia },
	doi       = { 10.1145/3139315.3139318 },
	isbn      = { 9781450351171 },
	month     = { oct },
	pages     = { 51--60 },
	publisher = { ACM Press },
	series    = { ESTIMedia `17},
	title     = { Asynchronous One-Sided Communications and Synchronizations for a Clustered Manycore Processor },
	url       = { http://dl.acm.org/citation.cfm?doid=3139315.3139318 },
	year      = { 2017 }
}

@inproceedings{Varghese2014,
    abstract = { With energy efficiency and power consumption being the
                 primary impediment in the path to exascale systems, low-power
                 high performance embedded systems are of increasing
                 interest. The Parallella System-on-module (SoM) created by
                 Adapteva combines the Epiphany-IV 64-core coprocessor with a
                 host ARM processor housed in a Zynq System-on-chip. The
                 Epiphany integrates low-power RISC cores on a 2D mesh
                 network and promises up to 70 GFLOPS/Watt of processing
                 efficiency. However, with just 32 KB of memory per eCore for
                 storing both data and code, and only low level inter-core
                 communication support, programming the Epiphany system
                 presents several challenges. In this paper we evaluate the
                 performance of the Epiphany system for a variety of basic
                 compute and communication operations. Guided by this data we
                 explore various strategies for implementing stencil based
                 application codes on the Epiphany system. With future
                 systems expected to house 4096 eCores, the merits of the
                 Epiphany architecture as a path to exascale is compared to
                 other competing power efficient systems.
    },
    address   = { Phoenix, USA },
    author    = { Varghese, Anish and
                  Edwards, Bob and
                  Mitra, Gaurav and
                  Rendell, Alistair P
    },
    booktitle = { International Parallel and Distributed Processing Symposium Workshops (IPDPSW) },
    doi       = { 10.1109/IPDPSW.2014.112 },
    isbn      = { 978-1-4799-4116-2 },
    language  = { English },
    pages     = { 984--992 },
    publisher = { IEEE },
    series    = { IPDPSW `14 },
    title     = { Programming the Adapteva Epiphany 64-Core Network-on-Chip Coprocessor },
    url       = { http://ieeexplore.ieee.org/document/6969488/ },
    year      = { 2014 }
}

@inproceedings{Villa2008,
    address   = { Atlanta, USA},
    author    = { Villa, Oreste and
                  Palermo, Gianluca and
                  Silvano, Cristina
    },
    booktitle = { International Conference on Compilers, Architecture and Synthesis for Embedded Systems },
    doi       = { 10.1145/1450095.1450110 },
    isbn      = { 9781605584690 },
    month     = { oct },
    pages     = { 81--89 },
    publisher = { ACM Press },
    series    = { CASES `08 },
    title     = { Efficiency and Scalability of Barrier Synchronization on NoC Based Many-Core Architectures },
    url       = { http://portal.acm.org/citation.cfm?doid=1450095.1450110 },
    year      = { 2008 }
}
